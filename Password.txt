#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <crypt.h>
#include <math.h>
#include <time.h>

int n_passwords = 4;

char *encrypted_passwords[] = {
  "$6$KB$6SsUGf4Cq7/Oooym9WWQN3VKeo2lynKV9gXVyEG4HvYy1UFRx.XAye89TLp/OTcW7cGpf9UlU0F.cK/S9CfZn1",
  "$6$KB$kwebHrK29hjigYG8zvp87N2VpoQE51HML2nZsPyUYIRTcdOpbfCWgjr5wfdXEgNJFOMyt1weZuyTr8AmTZZ8d/",
  "$6$KB$OtjvdN6IOVby7U6PRYd2fBEjTv6R0IpsFfsy5JwtyZfsz5rBdrMnARYV9s7PxHkvKTI8wLz5YbEYFCFq1SUgC1",
  "$6$KB$MD4fomhxal9x9Bc5K06IHDh32W.8osCGJepMkj8H1QRuHP9OAtR8UpGHEGZ4Rj0mOm/qIBhnriusixnF6rpPW1"
};

void substr(char *dest, char *src, int start, int length){
  memcpy(dest, src + start, length);
  *(dest + length) = '\0' }

void crack(char *salt_and_encrypted){
  int x, y, z;
  char salt[7];
  char plain[7];
  char *enc;
  int count = 0;

  int threeIn; 

  substr(salt, salt_and_encrypted, 0, 6);

  for(x='A'; x<='Z'; x++){
    for(y='A'; y<='Z'; y++){
      for(threeIn = 'A'; threeIn <= 'Z'; threeIn++){ 
        for(z=0; z<=99; z++){
          sprintf(plain, "%c%c%c%02d", x, y, threeIn, z);
          enc = (char *) crypt(plain, salt);
          count++;
          if(strcmp(salt_and_encrypted, enc) == 0){
            printf("#%-8d%s %s\n", count, plain, enc);
          } else {
            printf(" %-8d%s %s\n", count, plain, enc);
          }
        }
      }
    }
  }
  printf("%d solutions explored\n", count);
}

int timeDiff(struct timespec *start, struct timespec *finish, long long int *difference) {
	long long int ds = finish->tv_sec - start->tv_sec;
	long long int dn = finish->tv_nsec - start->tv_nsec;

	if (dn < 0) {
		ds--;
		dn += 1000000000; }

	*difference = ds * 1000000000 + dn;
	return !(*difference > 0); }

int main(int argc, char *argv[]){
  struct timespec start, finish;
  long long int time_elapsed;
  clock_gettime(CLOCK_MONOTONIC, &start);

  int i;

  for(i=0;i<n_passwords;i<i++) {
    crack(encrypted_passwords[i]);  }

  clock_gettime(CLOCK_MONOTONIC, &finish);
  timeDiff(&start, &finish, &time_elapsed);
  printf("Time elasped was %lldns or %0.9lfs\n", time_elapsed, (time_elapsed / 1.0e9));

  return 0;
}

Explain your results of running your 3 initial password cracker with relation to your earlier hypothesis.
It is unrealistic getting the exact same running time result as hypothesised. However  if a computer with same capabilities is used you can get close by finding out the number of solutions it will explore and how long it took on the previous program with 2 initials. My hypothesis was close as the results showed it took 13,734 Seconds. 
Write a paragraph that compares the original results with those of your multithread password cracker.
The multithread password cracker code completed in just 3643 seconds compared to the 13,734 previously on a single core. This improve in speed and efficiency is expected as it is using multi cores each splitting the program in half from AAA00-NAA00. 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <crypt.h>
#include <math.h>
#include <time.h>
#include <pthread.h>

int n_passwords = 4;

char *encrypted_passwords[] = {
  "$6$KB$6SsUGf4Cq7/Oooym9WWQN3VKeo2lynKV9gXVyEG4HvYy1UFRx.XAye89TLp/OTcW7cGpf9UlU0F.cK/S9CfZn1",
  "$6$KB$kwebHrK29hjigYG8zvp87N2VpoQE51HML2nZsPyUYIRTcdOpbfCWgjr5wfdXEgNJFOMyt1weZuyTr8AmTZZ8d/",
  "$6$KB$OtjvdN6IOVby7U6PRYd2fBEjTv6R0IpsFfsy5JwtyZfsz5rBdrMnARYV9s7PxHkvKTI8wLz5YbEYFCFq1SUgC1",
  "$6$KB$MD4fomhxal9x9Bc5K06IHDh32W.8osCGJepMkj8H1QRuHP9OAtR8UpGHEGZ4Rj0mOm/qIBhnriusixnF6rpPW1"
};

void twoCore(){
  pthread_t thread_1, thread_2;

  void *kernel_function_1();
  void *kernel_function_2();

  pthread_create(&thread_1, NULL, kernel_function_1, NULL);
  pthread_create(&thread_2, NULL, kernel_function_2, NULL);

  pthread_join(thread_1, NULL);
  pthread_join(thread_2, NULL);
}

void substr(char *dest, char *src, int start, int length){
  memcpy(dest, src + start, length);
  *(dest + length) = '\0';
}

void *kernel_function_1(){
  int x, y, z;
  char salt[7];
  char plain[7];
  char *enc;
  int count = 0;

  char *encrypted_passwords[] = {
  "$6$KB$6SsUGf4Cq7/Oooym9WWQN3VKeo2lynKV9gXVyEG4HvYy1UFRx.XAye89TLp/OTcW7cGpf9UlU0F.cK/S9CfZn1",
  "$6$KB$kwebHrK29hjigYG8zvp87N2VpoQE51HML2nZsPyUYIRTcdOpbfCWgjr5wfdXEgNJFOMyt1weZuyTr8AmTZZ8d/",
  "$6$KB$OtjvdN6IOVby7U6PRYd2fBEjTv6R0IpsFfsy5JwtyZfsz5rBdrMnARYV9s7PxHkvKTI8wLz5YbEYFCFq1SUgC1",
  "$6$KB$MD4fomhxal9x9Bc5K06IHDh32W.8osCGJepMkj8H1QRuHP9OAtR8UpGHEGZ4Rj0mOm/qIBhnriusixnF6rpPW1"
  };

  int threeIn; 

  substr(salt, encrypted_passwords[0], 0, 6);
  for(int i=0;i<n_passwords;i<i++) {
    for(x='A'; x<='M'; x++){
      for(y='A'; y<='Z'; y++){
        for(threeIn = 'A'; threeIn <= 'Z'; threeIn++){ 
          for(z=0; z<=99; z++){
            sprintf(plain, "%c%c%c%02d", x, y, threeIn, z);
            enc = (char *) crypt(plain, salt);
            count++;
            if(strcmp(encrypted_passwords[i], enc) == 0){
              printf("#%-8d%s %s\n", count, plain, enc);
            } else {
              printf(" %-8d%s %s\n", count, plain, enc);
            }
          }
        }
      }
    }
  }

  printf("%d solutions explored\n", count);
}

void *kernel_function_2(){
  int x, y, z;
  char salt[7];
  char plain[7];
  char *enc;
  int count = 0;

  char *encrypted_passwords[] = {
  "$6$KB$6SsUGf4Cq7/Oooym9WWQN3VKeo2lynKV9gXVyEG4HvYy1UFRx.XAye89TLp/OTcW7cGpf9UlU0F.cK/S9CfZn1",
  "$6$KB$kwebHrK29hjigYG8zvp87N2VpoQE51HML2nZsPyUYIRTcdOpbfCWgjr5wfdXEgNJFOMyt1weZuyTr8AmTZZ8d/",
  "$6$KB$OtjvdN6IOVby7U6PRYd2fBEjTv6R0IpsFfsy5JwtyZfsz5rBdrMnARYV9s7PxHkvKTI8wLz5YbEYFCFq1SUgC1",
  "$6$KB$MD4fomhxal9x9Bc5K06IHDh32W.8osCGJepMkj8H1QRuHP9OAtR8UpGHEGZ4Rj0mOm/qIBhnriusixnF6rpPW1"
  };

  int threeIn; 

  substr(salt, encrypted_passwords[0], 0, 6);
  for(int i=0;i<n_passwords;i<i++) {
    for(x='N'; x<='Z'; x++){
      for(y='A'; y<='Z'; y++){
        for(threeIn = 'A'; threeIn <= 'Z'; threeIn++){ 
          for(z=0; z<=99; z++){
            sprintf(plain, "%c%c%c%02d", x, y, threeIn, z);
            enc = (char *) crypt(plain, salt);
            count++;
            if(strcmp(encrypted_passwords[i], enc) == 0){
              printf("#%-8d%s %s\n", count, plain, enc);
            } else {
              printf(" %-8d%s %s\n", count, plain, enc);
            }
          }
        }
      }
    }
  }

  printf("%d solutions explored\n", count);
}


int timeDiff(struct timespec *start, struct timespec *finish, long long int *difference) {
	long long int ds = finish->tv_sec - start->tv_sec;
	long long int dn = finish->tv_nsec - start->tv_nsec;

	if (dn < 0) {
		ds--;
		dn += 1000000000; }

	*difference = ds * 1000000000 + dn;
	return !(*difference > 0); }

int main(int argc, char *argv[]){
  struct timespec start, finish;
  long long int time_elapsed;
  clock_gettime(CLOCK_MONOTONIC, &start);

  int i;

  twoCore();
  clock_gettime(CLOCK_MONOTONIC, &finish);
  timeDiff(&start, &finish, &time_elapsed);
  printf("Time elasped was %lldns or %0.9lfs\n", time_elapsed, (time_elapsed / 1.0e9));

  return 0;
}
